# coding:utf-8

"""
=== Auto Generated ===
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.datax import RDMS2RDMSOperator
from airflowext.callback import main_failure_handler, main_retry_handler, main_success_handler


default_args = {
    'owner': '{{owner}}',
    'depends_on_past': False,
    'start_date': {{start_date}},
    'email': ['{{email}}'],
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': {{retries}},
    'on_failure_callback': main_failure_handler,
    'on_success_callback': main_success_handler,
    'on_retry_callback': main_retry_handler,
    'retry_delay': timedelta(seconds=30),
    # 'queue': 'bash_queue',
    # 'pool': 'backfill',
    # 'priority_weight': 10,
    # 'end_date': datetime(2016, 1, 1),
}

dag = DAG(
    '{{name}}', default_args=default_args, schedule_interval={{interval}}
)
{% for t in tasks %}

{{t.name}} = RDMS2RDMSOperator(
    sync_type='{{t.sync_type}}',
    append_basis='{{t.append_basis}}',
    task_id="{{t.name}}",
    src_conn_id="{{t.source.conn_id}}",
    src_query_sql="""{{t.source.query_sql}}""",
    src_source_from='{{t.source.source_from}}',
    tar_conn_id="{{t.target.conn_id}}",
    tar_table="{{t.target.table}}",
    tar_columns={{t.target.columns}},
    append_column='{{t.append_column}}',
    tar_pkeys='{{t.target.pkeys}}',
    tar_source_from_column='{{t.target.source_from_column}}',
    tar_post_sql_lsit={{t.target.post_sql_list}},
    dag=dag,
)
{% endfor %}

{% for parent, child in parent2child %}
{{parent}} >> {{child}}
{% endfor %}
